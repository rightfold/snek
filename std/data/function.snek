(let (
  #! Return the value argument.
  id (fn [t *] (fn (x t) x))

  #! Return the first value argument.
  const (fn [t *, u *] (fn (x t, _ u) x))

  #! Function composition.
  compose (fn [a *, b *, c *]
            (fn (f (-> b c), g (-> a b), x a)
              (f (g x))))

  flip (fn [a *, b *, c *]
         (fn (f (-> a (-> b c)), x b, y a)
	   (f y x)))

  category {
    compose-id id
    compose compose
  }

  semigroup (fn [a *] {
    append (fn (f (-> a a), g (-> a a))
             ([compose a a a] f g))
  })

  monoid (fn [a *] {
    append (.append [semigroup a])

    append-id [id a]
  })
) {
  id id
  const const
  compose compose
  category category
  semigroup semigroup
  monoid monoid
})
